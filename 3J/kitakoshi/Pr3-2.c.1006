#include <stdio.h>
#include <string.h>
#define BF 1
#define KMP 1
#define BM 1
#define TEXT_LENGTH 64
#define PATN_LENGTH 256
int next[PATN_LENGTH];
/* テキストとパターンの不一致が見つかったときにどれだけずらすかを示す表 */
int skip[PATN_LENGTH];

#define uchar unsigned char
#define max(a,b) ((a)>(b)?a:b) /* 二つの数a,bのうち大きい方を返すマクロ */

/* 文字列textから文字列patternを検索する(力まかせ法) */
int brute_force_search(char text[], char pattern[])
{
	int i=0,j=0;
	int i1,cnt=0;
	int text_len,patn_len;
	text_len=strlen(text);
	patn_len=strlen(pattern);
	while(i<text_len && j<patn_len){
		printf("%c",pattern[j]);
		if(text[i] == pattern[j]){
			i++;
			j++;
		}else{
			printf(" ...failure\n");
			cnt++;
			for(i1=0;i1<cnt;i1++) printf(" ");
			i=i-j+1;
			j=0;
		}
	}
	if(j==patn_len){
		printf(" ...success\n");
		return i-j;
	}else{
		return -1;
	}
}

/* ずらし表を作成する */
void init_next(char pattern[])
{
	int j,k,m;
	int patn_len=strlen(pattern);
	for ( j = 0; j < patn_len; j++ ) {
		if ( j < 1 )
			next[j] = 1;
		else {
			for ( k = 1; k < j; k++ ) {
				for ( m = k; m < j && pattern[m] == pattern[m-k]; m++ ) ;
				if ( m == j )
					break;
			}
			next[j] = k;
		}
	}
	for(j=0;j<patn_len;j++){
		printf("%c: next[ %d] =  %d\n",pattern[j],j,next[j]);
	}
}

/* 文字列textから文字列patternを検索する(KMP法) */
int kmp_search(char text[], char pattern[])
{
	int i=0,j=0;
	int i1;
	int cnt=0;
	int text_len,patn_len;
	text_len=strlen(text);
	patn_len=strlen(pattern);
	while(i<text_len && j< patn_len){
		printf("%c",pattern[j]);
		if(text[i] == pattern[j]){
			i++;
			j++;
		}else{
			printf(" ...failure\n");
			cnt++;
			
			j-=next[j];
			if(j<0){
				i++;
				j++;
			}
			for(i1=0;i1<i;i1++){
				printf(" ");
			}
		}
	}
	if(j==patn_len){
		printf(" ...success\n");
		return i-j;
	}else{
		return -1;
	}
}



/* BM法用のずらし表を作成する */
void init_skip(uchar pattern[])
{
	int i,patn_len=strlen(pattern);

	for( i = 0; i < 256; i++ )
		skip[i] = patn_len;
	for( i = 0; i < patn_len; i++ )
		skip[pattern[i]] = patn_len - i - 1;
}


/* 文字列textから文字列patternを検索する(BM法) */
int bm_search(uchar text[], uchar pattern[]) 
{
	int i; /* 注目しているテキストの位置 */
	int j; /* 注目しているパターンの位置 */
	int k;
	int text_len, patn_len;

	text_len = strlen(text);    /* テキストの長さをセット */
	patn_len = strlen(pattern); /* パターンの長さをセット */

	//iにテキストの最初の注目位置をセット
	i=patn_len-1;

	while( i < text_len ) {
		//jにパターンの最初の注目位置をセット
		j=patn_len-1;
		for(k=0;k<i;k++){
			printf(">");
		}
		printf("%c",pattern[j]);
		//while( テキストとパターンを１文字比較 ) {
		while(text[i] == pattern[j]){
			//すべての文字が一致したら
			//   パターンが見つかった位置を返す
			//テキストの位置を１文字戻す
			//パターンの位置を１文字戻す
			if(j==0){
				printf(" ...success\n");
				return i;
			}
			i--;
			j--;
			printf("\n");
			for(k=0;k<i;k++) printf(" ");
			printf("%c",pattern[j]);
		}
		printf(" ...failure\n");
		//テキストの注目点(i)を，不一致になった文字に応じた分量だけずらす
		i+=skip[pattern[j]]+1;

	}
	//-1を返す
	return -1;


	}


	int main(void)
	{
		uchar text[TEXT_LENGTH+1];
		uchar pattern[PATN_LENGTH+1];
		int position;
		int i;
		strcpy(text,"aabbabcabc");
		strcpy(pattern,"abcab");

#if BF
		printf("--- B F ---\n");
		printf("%s\n",text);
		position = brute_force_search(text, pattern);
		printf("position=%d\n",position);
#endif

#if KMP
		printf("--- KMP ---\n");
		init_next(pattern);
		printf("%s\n",text);
		position = kmp_search(text, pattern);
		printf("position=%d\n",position);
#endif


#if BM
		printf("--- B M ---\n");
		init_skip(pattern);
		for(i=0;i<strlen(pattern);i++){
			printf("%c: skip[%3d] = %d\n",pattern[i],pattern[i],skip[pattern[i]]);
		}
		printf("%s\n",text);
		position = bm_search(text, pattern);
		printf("position=%d\n",position);
#endif

		strcpy(text,"pyokopyokomipyokopyokomepyokopyokopyokopyokomupyokopyoko");
		strcpy(pattern,"pyokopyokomu");

#if BF
		printf("--- B F ---\n");
		printf("%s\n",text);
		position = brute_force_search(text, pattern);
		printf("position=%d\n",position);
#endif

#if KMP
		printf("--- KMP ---\n");
		init_next(pattern);
		printf("%s\n",text);
		position = kmp_search(text, pattern);
		printf("position=%d\n",position);
#endif


#if BM
		printf("--- B M ---\n");
		init_skip(pattern);
		for(i=0;i<strlen(pattern);i++){
			printf("%c: skip[%3d] = %d\n",pattern[i],pattern[i],skip[pattern[i]]);
		}
		printf("%s\n",text);
		position = bm_search(text, pattern);
		printf("position=%d\n",position);
#endif


		return 0;
	}
